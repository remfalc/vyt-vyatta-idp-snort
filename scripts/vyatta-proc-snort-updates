#!/bin/bash
#
# Module: vyatta-proc-snort-updates
# 
# **** License ****
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2 as
# published by the Free Software Foundation.
# 
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
# 
# This code was originally developed by Vyatta, Inc.
# Portions created by Vyatta are Copyright (C) 2008-2010 Vyatta, Inc.
# All Rights Reserved.
# 
# Author: An-Cheng Huang
# Date: May 2008
# Description: process snort update
# 
# **** End License ****
#

NEW_SNORT_UPDATE_FILE=$1

BASE_DIR='/opt/vyatta/etc/ips'
CONFIG_DIR='/config/ips'
WORK_DIR="$BASE_DIR/work"
BACKUP_DIR="$BASE_DIR/backup"
LOG_FILE="$BASE_DIR/update.log"
SNORT_UPDATE_FILE="snortrules-snapshot-latest.tar"
CUR_TIME=$(date +%F-%H%M%S)
LAST_UPDATE_STATUS_FILE="$BASE_DIR/lastupdatestatus"

log_message ()
{
  echo "$CUR_TIME: $*" >> $LOG_FILE
}

abort_updates ()
{
  log_message "$*"
  log_message 'Update aborted due to error. IPS rules not updated.'
  echo update failed at `date` > $LAST_UPDATE_STATUS_FILE
  rm -f $BASE_DIR/SNORT_UPDATE_FILE.gz
  rm -f $WORK_DIR/SNORT_UPDATE_FILE
  exit 1
}

if [ ! -f $NEW_SNORT_UPDATE_FILE ]; then
  log_message 'Update file missing.'
  exit 1
fi

#file_type=$(file --brief --mime-type $NEW_SNORT_UPDATE_FILE)
#if [ "$file_type" != "application/x-gzip" ]; then
#  log_message "Invalid file type [$file_type]."
#  exit 1
#fi

log_message "Starting unpack & processing new rules."

mkdir -p $BASE_DIR
mkdir -p $CONFIG_DIR/rules
cd $BASE_DIR

# clean up work dir
rm -rf $WORK_DIR
mkdir -p $WORK_DIR/etc
mkdir -p $WORK_DIR/rules

mv $NEW_SNORT_UPDATE_FILE $WORK_DIR/$SNORT_UPDATE_FILE.gz >&/dev/null
cp -f $WORK_DIR/$SNORT_UPDATE_FILE.gz $CONFIG_DIR >& /dev/null

cd $WORK_DIR
cp ../$NEW_SNORT_UPDATE_FILE.md5 ./$SNORT_UPDATE_FILE.gz.md5 >&/dev/null

# sanity check
if [ ! -r $WORK_DIR/$SNORT_UPDATE_FILE.gz ]; then
  abort_updates "Failed to get $SNORT_UPDATE_FILE.gz"
fi

# extract the new etc directory
tar xzvf $SNORT_UPDATE_FILE.gz etc>&/dev/null

# We need local rules if this is the first run
if [ ! -f $CONFIG_DIR/rules/local.rules ]; then
  touch $CONFIG_DIR/rules/local.rules
fi
if [ ! -f $CONFIG_DIR/modify-sids ]; then
  touch $CONFIG_DIR/modify-sids
fi

# generate $WORK_DIR/etc/snort/rules/vyatta.rules 
# with pulledpork. Pulled pork now does the initial processing
/opt/vyatta/bin/sudo-users/pulledpork.pl \
  -c /opt/vyatta/etc/ips/pulledpork.conf \
  -T -S latest -n 2>&1 /dev/null


# process etc/
(
  cd etc
  # use downloaded snort.conf file
  tar -zxvf $SNORT_UPDATE_FILE etc/snort.conf

  # generate snort.conf from ips.conf
  #cp -f ips.conf snort.conf
  sed '/^var RULE_PATH / {
         s/\(var RULE_PATH \).*$/\1\/etc\/snort\/rules/
         a\
\n### NOTE: Lines between the BEGIN and END markers below are generated\
###       automatically. Do NOT modify by hand.\
# === BEGIN VYATTA SNORT CONFIG ===\
# === END VYATTA SNORT CONFIG ===
       }' snort.conf > ips.conf

  #sed -i '/^var PREPROC_RULE_PATH / {
  #       s/\(var PREPROC_RULE_PATH \).*$/\1\/etc\/snort\/preproc_rules/
  #     }' ips.conf
  sed -i '/PREPROC_RULE_PATH/d' ips.conf
  if [ ! -f ips.conf ]; then
    abort_updates 'Cannot generate ips.conf'
  fi

  if ! grep -q 'BEGIN VYATTA SNORT CONFIG' ips.conf; then
    abort_updates 'Cannot generate ips.conf'
  fi

  # copy the vyatta section from the old ips.conf
  sed -n '1,/^# === BEGIN VYATTA SNORT CONFIG ===/p' ips.conf > ips.conf.new
  sed -n '1,/^# === BEGIN VYATTA SNORT CONFIG ===/d
          /^# === END VYATTA SNORT CONFIG ===/,$d
          p' /etc/snort/ips.conf >> ips.conf.new
  sed -n '/^# === END VYATTA SNORT CONFIG ===/,$p' ips.conf >> ips.conf.new
  mv ips.conf.new ips.conf

  # correct library path
  sed -i 's/\/usr\/local\/lib/\/usr\/lib/' ips.conf

  # comment out dynamicdetection 
  sed -i s/^dynamicdetection/#dynamicdetection/ ips.conf
  sed -i 's/^\(preprocessor normalize_.*\)/\#\1/' ips.conf

  # enable preproc_rules
  sed -i 's/^\# \(include $PREPROC_RULE_PATH\/preprocessor.rules.*$\)/\1/' \
    ips.conf
  sed -i 's/^\# \(include $PREPROC_RULE_PATH\/decoder.rules.*$\)/\1/' \
    ips.conf
  sed -i '/clamav.config/d' ips.conf
  sed -i '/$RULE_PATH/d' ips.conf
  sed -i '/# site specific rules/ a \
include /config/ips/rules/local.rules \
include /etc/snort/rules/vyatta.rules' ips.conf

  cp -f ips.conf /etc/snort/ips.conf
  cp -f ips.conf snort.conf

  # sanity check
  if ! grep -q '^ruletype p1action' snort.conf; then
    abort_updates 'Cannot generate ips.conf'
  fi

  # get the missing files
  if ! cp /etc/snort/{antivirus.conf,clamav.config,snort.debian.conf} .; then
    abort_updates 'Original config file missing'
  fi

  # copy barnyard2.conf if exists
  if [ -f /etc/snort/barnyard2.conf ]; then
    cp -f /etc/snort/barnyard2.conf .
  fi

  # copy gen-msg.map if exists
  if [ -f /etc/snort/gen-msg.map ]; then
    cp -f /etc/snort/gen-msg.map .
  fi

  # copy threshold.conf if exists
  if [ -f /etc/snort/threshold.conf ]; then
    cp -f /etc/snort/threshold.conf .
  fi
)

# process rules/
if ! /opt/vyatta/sbin/vyatta-proc-snort-rules.pl \
        --classfile ./etc/classification.config \
        --ruledir ./rules --outdir ./rules-new; then
  abort_updates 'Cannot process downloaded rules'
fi

# copy any local rules
cp -f /etc/snort/rules/local.rules rules-new

# move /etc/snort to backup
mkdir -p $BACKUP_DIR
if ! mv /etc/snort $BACKUP_DIR/snort.$CUR_TIME >&/dev/null; then
  abort_updates 'Failed to move /etc/snort'
fi

# workaround possible unionfs bug where the previous mv does
# not create a white-out file
rm -rf /etc/snort

# move etc to /etc/snort
if ! mv etc /etc/snort >&/dev/null; then
  abort_updates 'Failed to move etc'
fi

# move rules-new to /etc/snort/rules
if ! mv rules-new /etc/snort/rules >&/dev/null; then
  abort_updates 'Failed to move rules'
fi

# move preproc_rules-new to /etc/snort/preproc_rules
if [ -d preproc_rules-new ]; then
    if ! mv preproc_rules-new /etc/snort/preproc_rules >&/dev/null; then
      abort_updates 'Failed to move preproc_rules'
    fi
fi

# 'snort -T' check.
# if it fails, restore the directories and abort
if ! /etc/init.d/snort config-check >&/dev/null; then
  rm -rf /etc/snort
  mv $BACKUP_DIR/snort.$CUR_TIME /etc/snort >&/dev/null
  abort_updates 'Final rule check failed'
fi

# finally, restart snort
/opt/vyatta/sbin/vyatta-update-inspection.pl 3 0 orig_only

echo update succeeded at `date` > $LAST_UPDATE_STATUS_FILE
log_message 'IPS rules update completed successfully'
log_message "Original rules are moved to $BACKUP_DIR/snort.$CUR_TIME"
rm -rf $WORK_DIR
exit 0

