#!/bin/bash
#
# Module: vyatta-proc-snort-changes
# 
# **** License ****
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2 as
# published by the Free Software Foundation.
# 
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
# 
# This code was originally developed by Vyatta, Inc.
# Portions created by Vyatta are Copyright (C) 2008-2010 Vyatta, Inc.
# All Rights Reserved.
# 
# Author: John Southworth
# Date: March 2011
# Description: process snort ruleset changes
# 
# **** End License ****
#

NEW_SNORT_UPDATE_FILE=$1

BASE_DIR='/opt/vyatta/etc/ips'
CONFIG_DIR='/config/ips'
WORK_DIR="$BASE_DIR/work"
BACKUP_DIR="$BASE_DIR/backup"
LOG_FILE="$BASE_DIR/update.log"
SNORT_UPDATE_FILE="snortrules-snapshot-latest.tar"
CUR_TIME=$(date +%F-%H%M%S)
LAST_UPDATE_STATUS_FILE="$BASE_DIR/lastupdatestatus"

log_message ()
{
  echo "$CUR_TIME: $*" >> $LOG_FILE
}

abort_updates ()
{
  log_message "$*"
  log_message 'Update aborted due to error. IPS rules not updated.'
  echo update failed at `date` 
  rm -f $WORK_DIR/$SNORT_UPDATE_FILE.gz
  rm -f $WORK_DIR/$SNORT_UPDATE_FILE.gz.md5
  exit 1
}

if [ ! -f $NEW_SNORT_UPDATE_FILE ]; then
  log_message 'Update file missing.'
  exit 1
fi

#file_type=$(file --brief --mime-type $NEW_SNORT_UPDATE_FILE)
#if [ "$file_type" != "application/x-gzip" ]; then
#  log_message "Invalid file type [$file_type]."
#  exit 1
#fi

log_message "Starting unpack & processing new rules."

mkdir -p $BASE_DIR
mkdir -p /etc/snort/rules
mkdir -p $CONFIG_DIR/rules
cd $BASE_DIR

# clean up work dir
rm -rf $WORK_DIR
mkdir -p $WORK_DIR/rules
mkdir -p $WORK_DIR/etc
mkdir -p $BACKUP_DIR/tmp

cp -f $NEW_SNORT_UPDATE_FILE $WORK_DIR/$SNORT_UPDATE_FILE.gz >/dev/null 2>&1

cd $WORK_DIR

# sanity check
if [ ! -r $WORK_DIR/$SNORT_UPDATE_FILE.gz ]; then
  abort_updates "Failed to get $SNORT_UPDATE_FILE.gz"
fi

# We need local rules if this is the first run
if [ ! -f $CONFIG_DIR/rules/local.rules ]; then
  touch $CONFIG_DIR/rules/local.rules
fi
if [ ! -f $CONFIG_DIR/modify-sid ]; then
  touch $CONFIG_DIR/modify-sid
fi
if [ ! -f $BASE_DIR/disable-sid ]; then
  touch $BASE_DIR/disable-sid
fi
if [ ! -f $BASE_DIR/enable-sid ]; then
  touch $BASE_DIR/enable-sid
fi

# generate $WORK_DIR/etc/snort/rules/vyatta.rules 
# with pulledpork. Pulled pork now does the initial processing
echo "Processing rules..."
/opt/vyatta/bin/sudo-users/pulledpork.pl \
  -c /opt/vyatta/etc/ips/pulledpork.conf \
  -T -S latest -n > /tmp/pulledpork.log 2>&1 
ppret=$?
if [ $ppret -ne 0 ]
then
   exit 1
fi

cat /tmp/pulledpork.log | 
grep -v -e 'Done' -e 'Fly Piggy Fly' -e 'sid_changes' \
        -e '[_|\\|\||~]' -e 'http' -e '^$' \
        -e 'Reading' -e 'Prepping' -e 'Writing' | 
sed -e 's|/opt/vyatta/etc/ips/work/etc/||' \
    -e 's|/opt/vyatta/etc/ips/work/rules/||' \
    -e 's|/opt/vyatta/etc/ips/||'

# process rules/
if ! /opt/vyatta/sbin/vyatta-proc-snort-rules.pl \
        --classfile /etc/snort/classification.config \
        --ruledir ./rules --outdir ./rules-new; then
  abort_updates 'Cannot process downloaded rules'
fi

# move /etc/snort to backup
mkdir -p $BACKUP_DIR
mv /etc/snort/rules/vyatta.rules $BACKUP_DIR/tmp/vyatta.rules >&/dev/null
mv /etc/snort/sid-msg.map $BACKUP_DIR/tmp/sid-msg.map >&/dev/null

# move rules-new to /etc/snort/rules
if ! mv rules-new/vyatta.rules /etc/snort/rules/vyatta.rules >&/dev/null; then
  abort_updates 'Failed to move rules'
fi
if ! mv etc/sid-msg.map /etc/snort/sid-msg.map >&/dev/null; then
  abort_updates 'Failed to move rules'
fi
if [[ ! -f /etc/snort/snort.conf ]]; then
  cp /etc/snort/ips.conf /etc/snort/snort.conf >&/dev/null
fi

# 'snort -T' check.
# if it fails, restore the directories and abort
if ! /etc/init.d/snort config-check >&/dev/null; then
  mv $BACKUP_DIR/tmp/vyatta.rules /etc/snort/rules/vyatta.rules >&/dev/null
  mv $BACKUP_DIR/tmp/sid-msg.map /etc/snort/sid-msg.map >&/dev/null
  abort_updates 'Final rule check failed'
fi

rm -rf $WORK_DIR
rm -rf $BACKUP_DIR/tmp
exit 0

